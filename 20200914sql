customer: 고객
cid: customer id
cnm: customer name
SELECT *
FROM customer;


product: 제품
pid: product id: 제품 번호
pnm: product name: 제품 이름 
SELECT *
FROM product;

cycle: 고객애음주기
cid : costomer id 고객 id
pid : product id 제품 id
day : 1-7 (일-토)
cnt :COUNT, = 수량 


SELECT *
FROM cycle;


ORACLE 로

4번
SELECT customer.cid,cnm, cycle.pid, cycle.day, cycle.cnt
FROM  customer,cycle
WHERE customer.cid = cycle.cid
      AND customer.cnm IN ('brown', 'sally');


ANSI-SQL

SELECT cid,cnm, cycle.pid, cycle.day, cycle.cnt
FROM  customer NATURAL JOIN cycle
WHERE customer. cnm IN('brwon', 'sally');
      





      
5번      
SELECT customer.cid, costomer.cnm, cycle.pid, product.pnm, cycle.day, cycle.cnt
FROM  customer,cycle,product
WHERE customer.cid = cycle.cid 
AND cycle.pid = product.pid
AND customer.cnm IN('brwon','sally');

      


SQL: 실행에 대한 순서가 없다. 
    조인할 테이블에 대해서 FROM 절에 기술한 순으로 테이블을 읽지 않음. 
    FROM customer, cycle, product ==> 오라클에서는 product부터 읽을 수도있다. 

      



JOIN 구분
1. 문법에 따른 구분: ANSI-SQL. ORACLE
2. join의 형태에 따른 구분: SELF-JOIN, NONEQUI-JOIN, CROSS-JOIN
3. join 성공여부에 따라 데이터 표시여부: INNER JOIN - 조인이 성공했을 때 데이터를 표시
                                     OUTER JOIN - 조인이 실패해도 기준으로 정한 테이블의 컬럼 정보는 표시 
                                     
      
      
사번, 사원의 이름, 관리자 사번, 관리자 이름


SELECT e.ename, m.ename mgr
FROM emp e LEFT OUTER JOIN emp m
     ON (e.mgr = m.empno);

답:

KING(PRESIDENT)의 경우 MGR 컬럼의 값이 NULL 이기 때문에 조인에 실패 ==> 13건 조회 (14건중)
SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp e, emp m 
WHERE e.mgr = m.empno;


ANSI=SQL 로 한거

SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp e JOIN emp m ON (e.mgr = m.empno);

ANSI-SQL
SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp e LEFT OUTER JOIN emp m ON (e.mgr = m.empno);

위에꺼를 RIGHT 로 바꾼거 m이랑 e바꿔주면 됨

SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp m RIGHT OUTER JOIN  emp e ON (e.mgr = m.empno);

ORACLE-SQL: 데이터가 없는 쪽의 컬럼에 (+) 기호를 붙인자
        ANSI-SQL 기준 테이블 반대편 테이블의 컬럼에 (+)을 붙인다
        WHERE절 연결 조건에 적용

SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp e, emp m
WHERE e.mgr = m.empno (+); 


SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp m RIGHT OUTER JOIN  emp e ON (e.mgr = m.empno);


행에 대한 제한 조건 기술시 WHERE절에 기술 했을 때와 ON 절에 기술 했을 때 결과가 다르다. 

사원의 부서가 10번인 사람들만 조회 되도록 부서 번호 조건을 추가

SELECT e.empno, e.ename, e.mgr, m.ename
FROM emp e LEFT OUTER JOIN emp m ON (e.mgr = m.empno AND e.deptno = 10);


조건을 WHERE 절에 기술한 경우 ==> OUTER JOIN이 아닌 INNER 조인 결과가 나온다.
SELECT e.empno, e.ename, e.deptno, e.mgr, m.ename, m.deptno
FROM emp e LEFT OUTER JOIN emp m ON (e.mgr = m.empno)
WHERE e.deptno = 10;
     
     
SELECT e.empno, e.ename, e.deptno, e.mgr, m.ename, m.deptno
FROM emp e JOIN emp m ON (e.mgr = m.empno)
WHERE e.deptno = 10;

A= = {1,3,5}, B = {1,4,5}
A U B = { 1, 3, 4, 5 }

SELECT e.ename, m.ename
FROM emp e LEFT OUTER JOIN emp m ON (e.mgr = m.empno)
UNION     
SELECT  e.ename, m.ename
FROM emp e RIGHT OUTER JOIN emp m ON (e.mgr = m.empno)
MINUS
SELECT  e.ename, m.ename
FROM emp e FULL OUTER JOIN emp m ON (e.mgr = m.empno);
     
     
     
     
    
     
SELECT e.ename, m.ename
FROM emp e LEFT OUTER JOIN emp m ON (e.mgr = m.empno)
UNION     
SELECT  e.ename, m.ename
FROM emp e RIGHT OUTER JOIN emp m ON (e.mgr = m.empno)
INTERSECT
SELECT  e.ename, m.ename
FROM emp e FULL OUTER JOIN emp m ON (e.mgr = m.empno);
     
     
     
     
     
SELECT *
FROM buyprod
WHERE BUY_DATE = TO_DATE('2005/01/25', 'YYYY/MM/DD');


248P. 실습 outerjoin 1번

SELECT b.buy_date,b.buy_prod,p.prod_id,p.prod_name,b.buy_qty
FROM buyprod b, prod p
WHERE b.buy_prod(+) = p.prod_id
AND b. BUY_DATE (+) =  TO_DATE ('2005/01/25','YYYY/MM/DD');


ANSI로  
SELECT b.buy_date,b.buy_prod,p.prod_id,p.prod_name,b.buy_qty
FROM buyprod b RIGHT OUTER JOIN prod p
ON( b.buy_prod(+) = p.prod_id AND b.BUY_DATE =  TO_DATE ('2005/01/25','YYYY/MM/DD');




